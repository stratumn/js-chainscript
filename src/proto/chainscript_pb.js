/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.stratumn.chainscript.Evidence', null, global);
goog.exportSymbol('proto.stratumn.chainscript.Link', null, global);
goog.exportSymbol('proto.stratumn.chainscript.LinkMeta', null, global);
goog.exportSymbol('proto.stratumn.chainscript.LinkReference', null, global);
goog.exportSymbol('proto.stratumn.chainscript.Process', null, global);
goog.exportSymbol('proto.stratumn.chainscript.Segment', null, global);
goog.exportSymbol('proto.stratumn.chainscript.SegmentMeta', null, global);
goog.exportSymbol('proto.stratumn.chainscript.Signature', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stratumn.chainscript.Segment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stratumn.chainscript.Segment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.stratumn.chainscript.Segment.displayName = 'proto.stratumn.chainscript.Segment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stratumn.chainscript.Segment.prototype.toObject = function(opt_includeInstance) {
  return proto.stratumn.chainscript.Segment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stratumn.chainscript.Segment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stratumn.chainscript.Segment.toObject = function(includeInstance, msg) {
  var f, obj = {
    link: (f = msg.getLink()) && proto.stratumn.chainscript.Link.toObject(includeInstance, f),
    meta: (f = msg.getMeta()) && proto.stratumn.chainscript.SegmentMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stratumn.chainscript.Segment}
 */
proto.stratumn.chainscript.Segment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stratumn.chainscript.Segment;
  return proto.stratumn.chainscript.Segment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stratumn.chainscript.Segment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stratumn.chainscript.Segment}
 */
proto.stratumn.chainscript.Segment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.stratumn.chainscript.Link;
      reader.readMessage(value,proto.stratumn.chainscript.Link.deserializeBinaryFromReader);
      msg.setLink(value);
      break;
    case 2:
      var value = new proto.stratumn.chainscript.SegmentMeta;
      reader.readMessage(value,proto.stratumn.chainscript.SegmentMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stratumn.chainscript.Segment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stratumn.chainscript.Segment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stratumn.chainscript.Segment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stratumn.chainscript.Segment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLink();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.stratumn.chainscript.Link.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.stratumn.chainscript.SegmentMeta.serializeBinaryToWriter
    );
  }
};


/**
 * optional Link link = 1;
 * @return {?proto.stratumn.chainscript.Link}
 */
proto.stratumn.chainscript.Segment.prototype.getLink = function() {
  return /** @type{?proto.stratumn.chainscript.Link} */ (
    jspb.Message.getWrapperField(this, proto.stratumn.chainscript.Link, 1));
};


/** @param {?proto.stratumn.chainscript.Link|undefined} value */
proto.stratumn.chainscript.Segment.prototype.setLink = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.stratumn.chainscript.Segment.prototype.clearLink = function() {
  this.setLink(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.stratumn.chainscript.Segment.prototype.hasLink = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SegmentMeta meta = 2;
 * @return {?proto.stratumn.chainscript.SegmentMeta}
 */
proto.stratumn.chainscript.Segment.prototype.getMeta = function() {
  return /** @type{?proto.stratumn.chainscript.SegmentMeta} */ (
    jspb.Message.getWrapperField(this, proto.stratumn.chainscript.SegmentMeta, 2));
};


/** @param {?proto.stratumn.chainscript.SegmentMeta|undefined} value */
proto.stratumn.chainscript.Segment.prototype.setMeta = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.stratumn.chainscript.Segment.prototype.clearMeta = function() {
  this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.stratumn.chainscript.Segment.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stratumn.chainscript.SegmentMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.stratumn.chainscript.SegmentMeta.repeatedFields_, null);
};
goog.inherits(proto.stratumn.chainscript.SegmentMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.stratumn.chainscript.SegmentMeta.displayName = 'proto.stratumn.chainscript.SegmentMeta';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.stratumn.chainscript.SegmentMeta.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stratumn.chainscript.SegmentMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.stratumn.chainscript.SegmentMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stratumn.chainscript.SegmentMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stratumn.chainscript.SegmentMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    linkHash: msg.getLinkHash_asB64(),
    evidencesList: jspb.Message.toObjectList(msg.getEvidencesList(),
    proto.stratumn.chainscript.Evidence.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stratumn.chainscript.SegmentMeta}
 */
proto.stratumn.chainscript.SegmentMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stratumn.chainscript.SegmentMeta;
  return proto.stratumn.chainscript.SegmentMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stratumn.chainscript.SegmentMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stratumn.chainscript.SegmentMeta}
 */
proto.stratumn.chainscript.SegmentMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLinkHash(value);
      break;
    case 10:
      var value = new proto.stratumn.chainscript.Evidence;
      reader.readMessage(value,proto.stratumn.chainscript.Evidence.deserializeBinaryFromReader);
      msg.addEvidences(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stratumn.chainscript.SegmentMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stratumn.chainscript.SegmentMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stratumn.chainscript.SegmentMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stratumn.chainscript.SegmentMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLinkHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getEvidencesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.stratumn.chainscript.Evidence.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes link_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.stratumn.chainscript.SegmentMeta.prototype.getLinkHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes link_hash = 1;
 * This is a type-conversion wrapper around `getLinkHash()`
 * @return {string}
 */
proto.stratumn.chainscript.SegmentMeta.prototype.getLinkHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLinkHash()));
};


/**
 * optional bytes link_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLinkHash()`
 * @return {!Uint8Array}
 */
proto.stratumn.chainscript.SegmentMeta.prototype.getLinkHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLinkHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.stratumn.chainscript.SegmentMeta.prototype.setLinkHash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated Evidence evidences = 10;
 * @return {!Array<!proto.stratumn.chainscript.Evidence>}
 */
proto.stratumn.chainscript.SegmentMeta.prototype.getEvidencesList = function() {
  return /** @type{!Array<!proto.stratumn.chainscript.Evidence>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.stratumn.chainscript.Evidence, 10));
};


/** @param {!Array<!proto.stratumn.chainscript.Evidence>} value */
proto.stratumn.chainscript.SegmentMeta.prototype.setEvidencesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.stratumn.chainscript.Evidence=} opt_value
 * @param {number=} opt_index
 * @return {!proto.stratumn.chainscript.Evidence}
 */
proto.stratumn.chainscript.SegmentMeta.prototype.addEvidences = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.stratumn.chainscript.Evidence, opt_index);
};


proto.stratumn.chainscript.SegmentMeta.prototype.clearEvidencesList = function() {
  this.setEvidencesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stratumn.chainscript.Evidence = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stratumn.chainscript.Evidence, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.stratumn.chainscript.Evidence.displayName = 'proto.stratumn.chainscript.Evidence';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stratumn.chainscript.Evidence.prototype.toObject = function(opt_includeInstance) {
  return proto.stratumn.chainscript.Evidence.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stratumn.chainscript.Evidence} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stratumn.chainscript.Evidence.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, ""),
    backend: jspb.Message.getFieldWithDefault(msg, 10, ""),
    provider: jspb.Message.getFieldWithDefault(msg, 11, ""),
    proof: msg.getProof_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stratumn.chainscript.Evidence}
 */
proto.stratumn.chainscript.Evidence.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stratumn.chainscript.Evidence;
  return proto.stratumn.chainscript.Evidence.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stratumn.chainscript.Evidence} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stratumn.chainscript.Evidence}
 */
proto.stratumn.chainscript.Evidence.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setBackend(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setProvider(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stratumn.chainscript.Evidence.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stratumn.chainscript.Evidence.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stratumn.chainscript.Evidence} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stratumn.chainscript.Evidence.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBackend();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getProvider();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getProof_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.stratumn.chainscript.Evidence.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.stratumn.chainscript.Evidence.prototype.setVersion = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string backend = 10;
 * @return {string}
 */
proto.stratumn.chainscript.Evidence.prototype.getBackend = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.stratumn.chainscript.Evidence.prototype.setBackend = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string provider = 11;
 * @return {string}
 */
proto.stratumn.chainscript.Evidence.prototype.getProvider = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.stratumn.chainscript.Evidence.prototype.setProvider = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional bytes proof = 20;
 * @return {!(string|Uint8Array)}
 */
proto.stratumn.chainscript.Evidence.prototype.getProof = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes proof = 20;
 * This is a type-conversion wrapper around `getProof()`
 * @return {string}
 */
proto.stratumn.chainscript.Evidence.prototype.getProof_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProof()));
};


/**
 * optional bytes proof = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProof()`
 * @return {!Uint8Array}
 */
proto.stratumn.chainscript.Evidence.prototype.getProof_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProof()));
};


/** @param {!(string|Uint8Array)} value */
proto.stratumn.chainscript.Evidence.prototype.setProof = function(value) {
  jspb.Message.setProto3BytesField(this, 20, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stratumn.chainscript.Link = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.stratumn.chainscript.Link.repeatedFields_, null);
};
goog.inherits(proto.stratumn.chainscript.Link, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.stratumn.chainscript.Link.displayName = 'proto.stratumn.chainscript.Link';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.stratumn.chainscript.Link.repeatedFields_ = [20];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stratumn.chainscript.Link.prototype.toObject = function(opt_includeInstance) {
  return proto.stratumn.chainscript.Link.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stratumn.chainscript.Link} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stratumn.chainscript.Link.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, ""),
    data: msg.getData_asB64(),
    meta: (f = msg.getMeta()) && proto.stratumn.chainscript.LinkMeta.toObject(includeInstance, f),
    signaturesList: jspb.Message.toObjectList(msg.getSignaturesList(),
    proto.stratumn.chainscript.Signature.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stratumn.chainscript.Link}
 */
proto.stratumn.chainscript.Link.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stratumn.chainscript.Link;
  return proto.stratumn.chainscript.Link.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stratumn.chainscript.Link} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stratumn.chainscript.Link}
 */
proto.stratumn.chainscript.Link.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 11:
      var value = new proto.stratumn.chainscript.LinkMeta;
      reader.readMessage(value,proto.stratumn.chainscript.LinkMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    case 20:
      var value = new proto.stratumn.chainscript.Signature;
      reader.readMessage(value,proto.stratumn.chainscript.Signature.deserializeBinaryFromReader);
      msg.addSignatures(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stratumn.chainscript.Link.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stratumn.chainscript.Link.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stratumn.chainscript.Link} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stratumn.chainscript.Link.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.stratumn.chainscript.LinkMeta.serializeBinaryToWriter
    );
  }
  f = message.getSignaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      20,
      f,
      proto.stratumn.chainscript.Signature.serializeBinaryToWriter
    );
  }
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.stratumn.chainscript.Link.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.stratumn.chainscript.Link.prototype.setVersion = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes data = 10;
 * @return {!(string|Uint8Array)}
 */
proto.stratumn.chainscript.Link.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes data = 10;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.stratumn.chainscript.Link.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.stratumn.chainscript.Link.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.stratumn.chainscript.Link.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional LinkMeta meta = 11;
 * @return {?proto.stratumn.chainscript.LinkMeta}
 */
proto.stratumn.chainscript.Link.prototype.getMeta = function() {
  return /** @type{?proto.stratumn.chainscript.LinkMeta} */ (
    jspb.Message.getWrapperField(this, proto.stratumn.chainscript.LinkMeta, 11));
};


/** @param {?proto.stratumn.chainscript.LinkMeta|undefined} value */
proto.stratumn.chainscript.Link.prototype.setMeta = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.stratumn.chainscript.Link.prototype.clearMeta = function() {
  this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.stratumn.chainscript.Link.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * repeated Signature signatures = 20;
 * @return {!Array<!proto.stratumn.chainscript.Signature>}
 */
proto.stratumn.chainscript.Link.prototype.getSignaturesList = function() {
  return /** @type{!Array<!proto.stratumn.chainscript.Signature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.stratumn.chainscript.Signature, 20));
};


/** @param {!Array<!proto.stratumn.chainscript.Signature>} value */
proto.stratumn.chainscript.Link.prototype.setSignaturesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 20, value);
};


/**
 * @param {!proto.stratumn.chainscript.Signature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.stratumn.chainscript.Signature}
 */
proto.stratumn.chainscript.Link.prototype.addSignatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 20, opt_value, proto.stratumn.chainscript.Signature, opt_index);
};


proto.stratumn.chainscript.Link.prototype.clearSignaturesList = function() {
  this.setSignaturesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stratumn.chainscript.Process = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stratumn.chainscript.Process, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.stratumn.chainscript.Process.displayName = 'proto.stratumn.chainscript.Process';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stratumn.chainscript.Process.prototype.toObject = function(opt_includeInstance) {
  return proto.stratumn.chainscript.Process.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stratumn.chainscript.Process} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stratumn.chainscript.Process.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    state: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stratumn.chainscript.Process}
 */
proto.stratumn.chainscript.Process.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stratumn.chainscript.Process;
  return proto.stratumn.chainscript.Process.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stratumn.chainscript.Process} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stratumn.chainscript.Process}
 */
proto.stratumn.chainscript.Process.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stratumn.chainscript.Process.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stratumn.chainscript.Process.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stratumn.chainscript.Process} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stratumn.chainscript.Process.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.stratumn.chainscript.Process.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.stratumn.chainscript.Process.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string state = 10;
 * @return {string}
 */
proto.stratumn.chainscript.Process.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.stratumn.chainscript.Process.prototype.setState = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stratumn.chainscript.LinkMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.stratumn.chainscript.LinkMeta.repeatedFields_, null);
};
goog.inherits(proto.stratumn.chainscript.LinkMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.stratumn.chainscript.LinkMeta.displayName = 'proto.stratumn.chainscript.LinkMeta';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.stratumn.chainscript.LinkMeta.repeatedFields_ = [12,32];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stratumn.chainscript.LinkMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.stratumn.chainscript.LinkMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stratumn.chainscript.LinkMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stratumn.chainscript.LinkMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    prevLinkHash: msg.getPrevLinkHash_asB64(),
    priority: +jspb.Message.getFieldWithDefault(msg, 11, 0.0),
    refsList: jspb.Message.toObjectList(msg.getRefsList(),
    proto.stratumn.chainscript.LinkReference.toObject, includeInstance),
    process: (f = msg.getProcess()) && proto.stratumn.chainscript.Process.toObject(includeInstance, f),
    mapId: jspb.Message.getFieldWithDefault(msg, 21, ""),
    action: jspb.Message.getFieldWithDefault(msg, 30, ""),
    step: jspb.Message.getFieldWithDefault(msg, 31, ""),
    tagsList: jspb.Message.getRepeatedField(msg, 32),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stratumn.chainscript.LinkMeta}
 */
proto.stratumn.chainscript.LinkMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stratumn.chainscript.LinkMeta;
  return proto.stratumn.chainscript.LinkMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stratumn.chainscript.LinkMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stratumn.chainscript.LinkMeta}
 */
proto.stratumn.chainscript.LinkMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrevLinkHash(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPriority(value);
      break;
    case 12:
      var value = new proto.stratumn.chainscript.LinkReference;
      reader.readMessage(value,proto.stratumn.chainscript.LinkReference.deserializeBinaryFromReader);
      msg.addRefs(value);
      break;
    case 20:
      var value = new proto.stratumn.chainscript.Process;
      reader.readMessage(value,proto.stratumn.chainscript.Process.deserializeBinaryFromReader);
      msg.setProcess(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setMapId(value);
      break;
    case 30:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    case 31:
      var value = /** @type {string} */ (reader.readString());
      msg.setStep(value);
      break;
    case 32:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    case 100:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stratumn.chainscript.LinkMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stratumn.chainscript.LinkMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stratumn.chainscript.LinkMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stratumn.chainscript.LinkMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPrevLinkHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getPriority();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getRefsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.stratumn.chainscript.LinkReference.serializeBinaryToWriter
    );
  }
  f = message.getProcess();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.stratumn.chainscript.Process.serializeBinaryToWriter
    );
  }
  f = message.getMapId();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getAction();
  if (f.length > 0) {
    writer.writeString(
      30,
      f
    );
  }
  f = message.getStep();
  if (f.length > 0) {
    writer.writeString(
      31,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      32,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      100,
      f
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.stratumn.chainscript.LinkMeta.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.stratumn.chainscript.LinkMeta.prototype.setClientId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes prev_link_hash = 10;
 * @return {!(string|Uint8Array)}
 */
proto.stratumn.chainscript.LinkMeta.prototype.getPrevLinkHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes prev_link_hash = 10;
 * This is a type-conversion wrapper around `getPrevLinkHash()`
 * @return {string}
 */
proto.stratumn.chainscript.LinkMeta.prototype.getPrevLinkHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrevLinkHash()));
};


/**
 * optional bytes prev_link_hash = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrevLinkHash()`
 * @return {!Uint8Array}
 */
proto.stratumn.chainscript.LinkMeta.prototype.getPrevLinkHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrevLinkHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.stratumn.chainscript.LinkMeta.prototype.setPrevLinkHash = function(value) {
  jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional double priority = 11;
 * @return {number}
 */
proto.stratumn.chainscript.LinkMeta.prototype.getPriority = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.stratumn.chainscript.LinkMeta.prototype.setPriority = function(value) {
  jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * repeated LinkReference refs = 12;
 * @return {!Array<!proto.stratumn.chainscript.LinkReference>}
 */
proto.stratumn.chainscript.LinkMeta.prototype.getRefsList = function() {
  return /** @type{!Array<!proto.stratumn.chainscript.LinkReference>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.stratumn.chainscript.LinkReference, 12));
};


/** @param {!Array<!proto.stratumn.chainscript.LinkReference>} value */
proto.stratumn.chainscript.LinkMeta.prototype.setRefsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.stratumn.chainscript.LinkReference=} opt_value
 * @param {number=} opt_index
 * @return {!proto.stratumn.chainscript.LinkReference}
 */
proto.stratumn.chainscript.LinkMeta.prototype.addRefs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.stratumn.chainscript.LinkReference, opt_index);
};


proto.stratumn.chainscript.LinkMeta.prototype.clearRefsList = function() {
  this.setRefsList([]);
};


/**
 * optional Process process = 20;
 * @return {?proto.stratumn.chainscript.Process}
 */
proto.stratumn.chainscript.LinkMeta.prototype.getProcess = function() {
  return /** @type{?proto.stratumn.chainscript.Process} */ (
    jspb.Message.getWrapperField(this, proto.stratumn.chainscript.Process, 20));
};


/** @param {?proto.stratumn.chainscript.Process|undefined} value */
proto.stratumn.chainscript.LinkMeta.prototype.setProcess = function(value) {
  jspb.Message.setWrapperField(this, 20, value);
};


proto.stratumn.chainscript.LinkMeta.prototype.clearProcess = function() {
  this.setProcess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.stratumn.chainscript.LinkMeta.prototype.hasProcess = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional string map_id = 21;
 * @return {string}
 */
proto.stratumn.chainscript.LinkMeta.prototype.getMapId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/** @param {string} value */
proto.stratumn.chainscript.LinkMeta.prototype.setMapId = function(value) {
  jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional string action = 30;
 * @return {string}
 */
proto.stratumn.chainscript.LinkMeta.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 30, ""));
};


/** @param {string} value */
proto.stratumn.chainscript.LinkMeta.prototype.setAction = function(value) {
  jspb.Message.setProto3StringField(this, 30, value);
};


/**
 * optional string step = 31;
 * @return {string}
 */
proto.stratumn.chainscript.LinkMeta.prototype.getStep = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 31, ""));
};


/** @param {string} value */
proto.stratumn.chainscript.LinkMeta.prototype.setStep = function(value) {
  jspb.Message.setProto3StringField(this, 31, value);
};


/**
 * repeated string tags = 32;
 * @return {!Array<string>}
 */
proto.stratumn.chainscript.LinkMeta.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 32));
};


/** @param {!Array<string>} value */
proto.stratumn.chainscript.LinkMeta.prototype.setTagsList = function(value) {
  jspb.Message.setField(this, 32, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.stratumn.chainscript.LinkMeta.prototype.addTags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 32, value, opt_index);
};


proto.stratumn.chainscript.LinkMeta.prototype.clearTagsList = function() {
  this.setTagsList([]);
};


/**
 * optional bytes data = 100;
 * @return {!(string|Uint8Array)}
 */
proto.stratumn.chainscript.LinkMeta.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 100, ""));
};


/**
 * optional bytes data = 100;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.stratumn.chainscript.LinkMeta.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 100;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.stratumn.chainscript.LinkMeta.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.stratumn.chainscript.LinkMeta.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 100, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stratumn.chainscript.LinkReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stratumn.chainscript.LinkReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.stratumn.chainscript.LinkReference.displayName = 'proto.stratumn.chainscript.LinkReference';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stratumn.chainscript.LinkReference.prototype.toObject = function(opt_includeInstance) {
  return proto.stratumn.chainscript.LinkReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stratumn.chainscript.LinkReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stratumn.chainscript.LinkReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    linkHash: msg.getLinkHash_asB64(),
    process: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stratumn.chainscript.LinkReference}
 */
proto.stratumn.chainscript.LinkReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stratumn.chainscript.LinkReference;
  return proto.stratumn.chainscript.LinkReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stratumn.chainscript.LinkReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stratumn.chainscript.LinkReference}
 */
proto.stratumn.chainscript.LinkReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLinkHash(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stratumn.chainscript.LinkReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stratumn.chainscript.LinkReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stratumn.chainscript.LinkReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stratumn.chainscript.LinkReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLinkHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getProcess();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional bytes link_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.stratumn.chainscript.LinkReference.prototype.getLinkHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes link_hash = 1;
 * This is a type-conversion wrapper around `getLinkHash()`
 * @return {string}
 */
proto.stratumn.chainscript.LinkReference.prototype.getLinkHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLinkHash()));
};


/**
 * optional bytes link_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLinkHash()`
 * @return {!Uint8Array}
 */
proto.stratumn.chainscript.LinkReference.prototype.getLinkHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLinkHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.stratumn.chainscript.LinkReference.prototype.setLinkHash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string process = 10;
 * @return {string}
 */
proto.stratumn.chainscript.LinkReference.prototype.getProcess = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.stratumn.chainscript.LinkReference.prototype.setProcess = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stratumn.chainscript.Signature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stratumn.chainscript.Signature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.stratumn.chainscript.Signature.displayName = 'proto.stratumn.chainscript.Signature';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stratumn.chainscript.Signature.prototype.toObject = function(opt_includeInstance) {
  return proto.stratumn.chainscript.Signature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stratumn.chainscript.Signature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stratumn.chainscript.Signature.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    payloadPath: jspb.Message.getFieldWithDefault(msg, 10, ""),
    publicKey: msg.getPublicKey_asB64(),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stratumn.chainscript.Signature}
 */
proto.stratumn.chainscript.Signature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stratumn.chainscript.Signature;
  return proto.stratumn.chainscript.Signature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stratumn.chainscript.Signature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stratumn.chainscript.Signature}
 */
proto.stratumn.chainscript.Signature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayloadPath(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicKey(value);
      break;
    case 21:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stratumn.chainscript.Signature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stratumn.chainscript.Signature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stratumn.chainscript.Signature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stratumn.chainscript.Signature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPayloadPath();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      20,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      21,
      f
    );
  }
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.stratumn.chainscript.Signature.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.stratumn.chainscript.Signature.prototype.setVersion = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.stratumn.chainscript.Signature.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.stratumn.chainscript.Signature.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string payload_path = 10;
 * @return {string}
 */
proto.stratumn.chainscript.Signature.prototype.getPayloadPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.stratumn.chainscript.Signature.prototype.setPayloadPath = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional bytes public_key = 20;
 * @return {!(string|Uint8Array)}
 */
proto.stratumn.chainscript.Signature.prototype.getPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes public_key = 20;
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {string}
 */
proto.stratumn.chainscript.Signature.prototype.getPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicKey()));
};


/**
 * optional bytes public_key = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {!Uint8Array}
 */
proto.stratumn.chainscript.Signature.prototype.getPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.stratumn.chainscript.Signature.prototype.setPublicKey = function(value) {
  jspb.Message.setProto3BytesField(this, 20, value);
};


/**
 * optional bytes signature = 21;
 * @return {!(string|Uint8Array)}
 */
proto.stratumn.chainscript.Signature.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * optional bytes signature = 21;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.stratumn.chainscript.Signature.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 21;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.stratumn.chainscript.Signature.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.stratumn.chainscript.Signature.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 21, value);
};


goog.object.extend(exports, proto.stratumn.chainscript);
